class WuiWindow {
    /**
     * @param {Object} WindUI
     * @param {Object} WindUI.options
     * @param {Number} [WindUI.options.speed] Default: 250
     * @param {String} [WindUI.options.headerColor] Default: #fff
     * @param {String} [WindUI.options.headerBg] Default: #101010
     * @param {String} [WindUI.options.iconColor] Default: #ef4444
     * @param {String} [WindUI.options.bodyColor] Default: #fff
     * @param {String} [WindUI.options.bodyBg] Default: #202020
     * @param {String} [WindUI.options.shadowColor] Default: #00000033
     * @param {String} WindUI.title
     * @param {String} WindUI.icon Only Emoji
     * @param {String} WindUI.body HTML in Backticks
     * @returns {Promise} WindUI Window
     */
    constructor(WindUI = {}) {
        let { 
            options,
            title,
            icon,
            body
        } = WindUI;

        let $ = {
            speed: 250,
            headerColor: "#fff",
            headerBg: "#101010",
            iconColor: "#ef4444",
            bodyColor: "#fff",
            bodyBg: "#202020",
            shadowColor: "#00000033"
        };

        options = {
            speed: options ? options["speed"] || $["speed"] : $["speed"],
            headerColor: options ? options["headerColor"] || $["headerColor"] : $["headerColor"],
            headerBg: options ? options["headerBg"] || $["headerBg"] : $["headerBg"],
            iconColor: options ? options["iconColor"] || $["iconColor"] : $["iconColor"],
            bodyColor: options ? options["bodyColor"] || $["bodyColor"] : $["bodyColor"],
            bodyBg: options ? options["bodyBg"] || $["bodyBg"] : $["bodyBg"],
            shadowColor: options ? options["shadowColor"] || $["shadowColor"] : $["shadowColor"]
        };

        let WindowCSS = document
            .querySelector("style#windui-window-style");

        if (!WindowCSS) {
            const Styles = `
            /*
            * WindUI - Window Styles
            */

            @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

            body.windui-noselect {
                user-select: none;
            }

            @-webkit-keyframes WUIshow {
                from {
                    transform: scale(.5);
                    opacity: 0;
                }
                to {
                    transform: scale(1);
                    opacity: 1;
                }
            }
    
            @keyframes WUIshow {
                from {
                    transform: scale(.5);
                    opacity: 0;
                }
                to {
                    transform: scale(1);
                    opacity: 1;
                }
            }
    
            @-webkit-keyframes WUIhide {
                from {
                    transform: scale(1);
                    opacity: 1;
                }
                to {
                    transform: scale(.5);
                    opacity: 0;
                }
            }
    
            @keyframes WUIhide {
                from {
                    transform: scale(1);
                    opacity: 1;
                }
                to {
                    transform: scale(.5);
                    opacity: 0;
                }
            }

            div.windui-window {
                font-family: 'Poppins', sans-serif;
                -webkit-animation: WUIshow var(--wui-speed);
                animation: WUIshow var(--wui-speed);
                background: var(--wui-body-bg);
                box-shadow: 0 15px 20px -5px var(--wui-shadow), 0 8px 10px -6px var(--wui-shadow);
                min-width: 20rem;
                border-radius: .5rem;
                position: fixed;
                visibility: hidden;
                z-index: 9997;
            }
            div.windui-window.windui-window-hide {
                opacity: 0;
                -webkit-animation: WUIhide var(--wui-speed);
                animation: WUIhide var(--wui-speed);
            }
            div.windui-window div.windui-window-body {
                padding: .45rem .75rem;
                color: var(--wui-body-color);
            }
            div.windui-window div.windui-window-header {
                border-radius: .5rem .5rem 0 0;
                position: relative;
                user-select: none;
                display: flex;
                align-items: center;
                padding: .25rem .35rem;
                background-color: var(--wui-header-bg);
                color: var(--wui-header-color);
                height: 1.25rem;
                cursor: grab;
            }
            body.windui-noselect div.windui-window div.windui-window-header {
                cursor: grabbing;
            }
            div.windui-window div.windui-window-header div.windui-window-title {
                z-index: 9998;
                position: absolute;
                inset: 0;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            div.windui-window div.windui-window-header div.windui-window-title h1 {
                font-size: .75rem;
            }
            div.windui-window div.windui-window-header div.windui-window-buttons {
                z-index: 9999;
                flex: 1;
                display: flex;
                gap: 0 .25rem;
                align-items: center;
                justify-content: end;
            }
            div.windui-window div.windui-window-header div.windui-window-buttons button {
                background: transparent;
                display: flex;
                align-items: center;
                border: 0;
                outline: 0;
                padding: 0;
                margin: 0;
                height: 1rem;
                width: 1rem;
                padding: .25rem;
                background: var(--wui-icon-color);
                border-radius: 50%;
                cursor: pointer;
            }
            div.windui-window div.windui-window-header span.windui-window-icon {
                z-index: 9999;
                font-size: 1rem;
            }
            `;

            const StyleElement = document.createElement("style");
            StyleElement.innerHTML = Styles;
            StyleElement.id = "windui-window-style";
            (document.head || document.body).appendChild(StyleElement);
        };

        this.window = {
            id: Math.random().toString(36).substring(2),
            title,
            icon,
            body,
            ...options
        };

        return this;
    };

    open() {
        const IsUnique = document.getElementById(this.window.id) ? false : true;
        if (!IsUnique) return false;
        const WindowElement = document.createElement("div");

        if (!this.window.body) {
            this.window.body = `
                <h4 style="width: 100%; text-align: center;">
                    No body provided!
                </h4>
            `;
        };

        const WindowHTML = `
        <div class="windui-window-header">
            <span class="windui-window-icon">
                ${this.window.icon || "üõ†Ô∏è"}
            </span>
            <div class="windui-window-title">
                <h1>
                    ${this.window.title || "Unknown Window"}
                </h1>
            </div>
            <div class="windui-window-buttons">
                <button id="windui-close">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path fill="var(--wui-header-bg)" d="M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"/></svg>
                </button>
            </div>
        </div>
        <div class="windui-window-body"></div>
        `;

        WindowElement.id = this.window.id;
        WindowElement.classList.add("windui-window");
        WindowElement.innerHTML = WindowHTML;
        WindowElement.querySelector("div.windui-window-body").innerHTML = this.window.body;
        document.body.appendChild(WindowElement);
        
        
        WindowElement.setAttribute("style", [
            `--wui-speed: ${this.window.speed}ms;`,
            `--wui-header-color: ${this.window.headerColor};`,
            `--wui-header-bg: ${this.window.headerBg};`,
            `--wui-icon-color: ${this.window.iconColor};`,
            `--wui-body-color: ${this.window.bodyColor};`,
            `--wui-body-bg: ${this.window.bodyBg};`,
            `--wui-shadow: ${this.window.shadowColor};`
        ].join(" "));

        let isMouseDown,
            initX,
            initY,
            height = WindowElement.offsetHeight,
            width = WindowElement.offsetWidth,
            windowHeader = WindowElement.querySelector("div.windui-window-header");

        windowHeader.addEventListener("mousedown", e => {
            isMouseDown = true;
            document.body.classList.add("windui-noselect");
            initX = e.offsetX;
            initY = e.offsetY;
        });

        document.addEventListener("mousemove", e => {
            if (isMouseDown) {
                let cx = e.clientX - initX,
                    cy = e.clientY - initY;

                if (cx < 0) cx = 0;
                if (cy < 0) cy = 0;

                if (window.innerWidth - e.clientX + initX < width) cx = window.innerWidth - width;
                if (e.clientY > window.innerHeight - height + initY) cy = window.innerHeight - height;

                WindowElement.style.left = cx + "px";
                WindowElement.style.top = cy + "px";
            };
        });

        document.addEventListener("mouseup", () => {
            isMouseDown = false;
            document.body.classList.remove("windui-noselect");
        });

        new ResizeObserver(() => {
            document.querySelectorAll("div.windui-window").forEach(_w => {
                _w.style.top = (Math.round(window.innerHeight / 2 - _w.offsetHeight / 2) / window.innerHeight) * 100 + "%";
                _w.style.left = (Math.round(window.innerWidth / 2 - _w.offsetWidth / 2) / window.innerWidth) * 100 + "%";
            });
        }).observe(document.body);

        WindowElement.style.top = (Math.round(window.innerHeight / 2 - WindowElement.offsetHeight / 2) / window.innerHeight) * 100 + "%";
        WindowElement.style.left = (Math.round(window.innerWidth / 2 - WindowElement.offsetWidth / 2) / window.innerWidth) * 100 + "%";
        WindowElement.style.visibility = "visible";

        return new Promise(resolve => {
            WindowElement
                .querySelector("div.windui-window-buttons button#windui-close")
                .addEventListener("click", e => {
                    e.preventDefault();
                    this.close();
                    resolve({
                        $: this,
                        success: false,
                        inputs: null
                    });
                });

            WindowElement
                .querySelectorAll("div.windui-window-body [_w=submit]")
                .forEach(element => {
                    element.addEventListener("click", e => {
                        e.preventDefault();
                        let inputs = [];

                        WindowElement
                            .querySelector("div.windui-window-body")
                            .querySelectorAll("input, select, textarea")
                            .forEach(formEl => {
                                inputs = [
                                    ...inputs,
                                    {
                                        id: formEl.id,
                                        name: formEl.name,
                                        value: formEl.value,
                                        node: formEl
                                    }
                                ];
                            });
                        
                        resolve({
                            $: this,
                            success: true,
                            inputs
                        });
                    });
                });
        });
    };

    close() {
        const WindowElement = document.getElementById(this.window.id);
        if (!WindowElement) return false;
        WindowElement.style.animation = `WUIhide var(--wui-speed)`;

        setTimeout(() => {
            WindowElement.remove();
        }, Number(this.window.speed));
        return true;
    };
};

if (typeof module != "undefined") {
    module.exports = WuiWindow;
};